// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  major         String?
  year          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auto-created from forms flag
  autoCreated   Boolean   @default(false)

  // Relations
  submissions   MusicSubmission[]
  groups        Group[]
  formResponses FormResponse[]
  analyses      AnalysisResult[]
}

model MusicSubmission {
  id            String    @id @default(cuid())
  userId        String
  songName      String
  artistName    String
  genres        String    // JSON string array
  energy        Float?
  valence       Float?
  danceability  Float?
  acousticness  Float?
  tempo         Float?
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Group {
  id             String    @id @default(cuid())
  userId         String
  name           String
  members        String    // JSON string of members
  compatibility  Float
  commonGenres   String    // JSON string array
  recommendations String   // JSON string
  csvContent     String?   // Stored CSV
  createdAt      DateTime  @default(now())

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FormResponse {
  id            String    @id @default(cuid())
  userId        String
  email         String    // Email from form (for mapping)
  formData      String    // JSON string of form data
  sourceType    String    // 'csv' or 'sheets'
  sourceUrl     String?
  processed     Boolean   @default(false)
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
}

model AnalysisResult {
  id            String    @id @default(cuid())
  userId        String
  analysisType  String    // 'pca', 'clustering', 'heatmap', etc.
  data          String    // JSON string of analysis data
  parameters    String?   // JSON string of parameters used
  createdAt     DateTime  @default(now())

  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, analysisType])
}